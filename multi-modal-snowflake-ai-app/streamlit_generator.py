#!/usr/bin/env python3
"""
Streamlit Application Generator
==============================
Generates customized Streamlit applications for Snowflake Cortex demos.

This module creates complete Streamlit apps based on client information and industry templates.
"""

import os
from typing import Dict, Any, List
from datetime import datetime

class StreamlitGenerator:
    """Generates customized Streamlit applications"""
    
    def __init__(self):
        self.base_template = self._load_base_template()
    
    def generate_app(self, client_info: Dict[str, Any], output_dir: str = "output") -> str:
        """Generate a complete Streamlit application for the client"""
        
        # Extract information
        company_name = client_info['name']
        website_info = client_info['website_info']
        industry = website_info['industry']
        
        # Create output directory
        os.makedirs(output_dir, exist_ok=True)
        
        # Generate app content
        app_content = self._generate_app_content(client_info)
        
        # Write to file
        filename = f"{company_name.lower().replace(' ', '_')}_cortex_demo.py"
        filepath = os.path.join(output_dir, filename)
        
        with open(filepath, 'w', encoding='utf-8') as f:
            f.write(app_content)
        
        return filepath
    
    def _generate_app_content(self, client_info: Dict[str, Any]) -> str:
        """Generate the complete Streamlit application content"""
        
        company_name = client_info['name']
        website_info = client_info['website_info']
        industry = website_info['industry']
        
        # Import industry template
        from demo_generator import DemoGenerator
        generator = DemoGenerator()
        template = generator.industry_templates[industry]
        sample_data = generator.generate_sample_data(industry, company_name)
        
        # Generate sections
        header_section = self._generate_header(company_name, template)
        imports_section = self._generate_imports()
        config_section = self._generate_config(company_name, template)
        data_section = self._generate_data_simulation(sample_data, template)
        sidebar_section = self._generate_sidebar(company_name, template, website_info)
        introduction_section = self._generate_introduction(company_name, template, sample_data)
        dashboard_section = self._generate_dashboard(company_name, template, sample_data)
        analyst_section = self._generate_cortex_analyst(company_name, template, industry)
        search_section = self._generate_cortex_search(company_name, template, industry)
        aisql_section = self._generate_aisql_multimodal(company_name, template, industry)
        ml_section = self._generate_ml_predictive(company_name, template, industry)
        alerts_section = self._generate_alerts_monitoring(company_name, template, sample_data)
        footer_section = self._generate_footer(company_name, template)
        
        # Combine all sections
        app_content = f'''{header_section}

{imports_section}

{config_section}

{data_section}

{sidebar_section}

{introduction_section}

{dashboard_section}

{analyst_section}

{search_section}

{aisql_section}

{ml_section}

{alerts_section}

{footer_section}
'''
        
        return app_content
    
    def _generate_header(self, company_name: str, template: Dict[str, Any]) -> str:
        """Generate the file header with documentation"""
        return f'''"""
{company_name} - Snowflake Cortex {template['name']} Demo
{"=" * (len(company_name) + len(template['name']) + 25)}
Comprehensive Streamlit application demonstrating Snowflake Cortex capabilities for {template['name'].lower()}:
- Cortex Analyst (Natural Language Queries for {template['name']} Analytics)
- Cortex Search (Document and Knowledge Base Search)
- AISQL Multimodal (Text and Data Analysis)
- ML Predictive (Forecasting and Pattern Detection)

Generated by: Multi-Modal Snowflake AI Demo Generator
Generated on: {datetime.now().strftime("%Y-%m-%d %H:%M:%S")}
Industry: {template['name']}
"""'''
    
    def _generate_imports(self) -> str:
        """Generate the imports section"""
        return '''import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import snowflake.connector
from snowflake.snowpark import Session
import json
import datetime
import numpy as np
from typing import Dict, List, Any
import base64
from io import StringIO'''
    
    def _generate_config(self, company_name: str, template: Dict[str, Any]) -> str:
        """Generate the Streamlit configuration and styling"""
        safe_company_name = company_name.replace("'", "\\'")
        
        return f'''# =====================================================
# APPLICATION CONFIGURATION
# =====================================================

st.set_page_config(
    page_title="{safe_company_name} - Cortex Demo",
    page_icon="{template['icon']}",
    layout="wide",
    initial_sidebar_state="expanded"
)

# {safe_company_name} Color Palette
COMPANY_COLORS = {{
    'primary': '{template['primary_color']}',      # Primary Brand Color
    'secondary': '{template['secondary_color']}',    # Secondary Color
    'accent': '{template['accent_color']}',       # Accent Color
    'warning': '#D69E2E',      # Warning
    'danger': '#E53E3E',       # Danger
    'neutral': '#4A5568',      # Gray
    'background': '#F7FAFC'    # Light Background
}}

# Custom CSS for {safe_company_name} branding
st.markdown(f"""
<style>
    .main-header {{
        background: linear-gradient(90deg, {{COMPANY_COLORS['primary']}} 0%, {{COMPANY_COLORS['secondary']}} 100%);
        padding: 1rem;
        border-radius: 10px;
        margin-bottom: 2rem;
        color: white;
        text-align: center;
    }}
    
    .metric-card {{
        background: white;
        padding: 1rem;
        border-radius: 8px;
        border-left: 4px solid {{COMPANY_COLORS['primary']}};
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        margin-bottom: 1rem;
    }}
    
    .section-header {{
        color: {{COMPANY_COLORS['primary']}};
        border-bottom: 2px solid {{COMPANY_COLORS['secondary']}};
        padding-bottom: 0.5rem;
        margin-bottom: 1rem;
    }}
    
    .alert-box {{
        padding: 1rem;
        border-radius: 8px;
        margin-bottom: 1rem;
    }}
    
    .alert-success {{
        background-color: #D1FAE5;
        border-left: 4px solid {{COMPANY_COLORS['accent']}};
        color: #065F46;
    }}
    
    .alert-warning {{
        background-color: #FEF3C7;
        border-left: 4px solid {{COMPANY_COLORS['warning']}};
        color: #92400E;
    }}
    
    .alert-danger {{
        background-color: #FEE2E2;
        border-left: 4px solid {{COMPANY_COLORS['danger']}};
        color: #991B1B;
    }}
    
    .stButton > button {{
        background-color: {{COMPANY_COLORS['primary']}};
        color: white;
        border-radius: 6px;
        border: none;
        padding: 0.5rem 1rem;
        font-weight: 500;
    }}
    
    .stButton > button:hover {{
        background-color: {{COMPANY_COLORS['secondary']}};
        transform: translateY(-1px);
        box-shadow: 0 4px 8px rgba(0,0,0,0.2);
    }}
</style>
""", unsafe_allow_html=True)'''
    
    def _generate_data_simulation(self, sample_data: Dict[str, Any], template: Dict[str, Any]) -> str:
        """Generate the data simulation section"""
        categories = sample_data['categories']
        metrics = sample_data['metrics']
        customers = sample_data['customers']
        revenue_scale = sample_data['revenue_scale']
        
        # Generate revenue figures based on scale
        base_revenue = revenue_scale['monthly_base']
        revenue_list = [int(base_revenue * (0.8 + i * 0.1)) for i in range(16)]
        
        return f'''# =====================================================
# SNOWFLAKE CONNECTION & DATA SIMULATION
# =====================================================

@st.cache_resource
def init_snowflake_connection():
    """Initialize Snowflake connection"""
    try:
        connection_params = {{
            "user": st.secrets.get("snowflake_user", "DEMO_USER"),
            "password": st.secrets.get("snowflake_password", "DEMO_PASSWORD"),
            "account": st.secrets.get("snowflake_account", "DEMO_ACCOUNT"),
            "warehouse": st.secrets.get("snowflake_warehouse", "CORTEX_WH"),
            "database": "COMPANY_ANALYTICS",
            "schema": "CORTEX_DEMO",
            "role": "ANALYTICS_ROLE"
        }}
        
        session = Session.builder.configs(connection_params).create()
        return session, True
    except Exception as e:
        st.error(f"Error connecting to Snowflake: {{str(e)}}")
        return None, False

@st.cache_data(ttl=300)
def execute_query(query: str) -> pd.DataFrame:
    """Execute query in Snowflake and return DataFrame"""
    session, connected = init_snowflake_connection()
    if not connected:
        return pd.DataFrame()
    
    try:
        result = session.sql(query).to_pandas()
        return result
    except Exception as e:
        st.error(f"Error executing query: {{str(e)}}")
        return pd.DataFrame()

def simulate_business_data():
    """Simulate business data when Snowflake is not available"""
    
    # Monthly performance data
    meses = pd.date_range('2023-01-01', periods=16, freq='ME')
    revenue_data = {revenue_list}
    transactions = [int(r * 0.1) for r in revenue_data]  # Scale transactions
    new_customers = [int(r * 0.005) for r in revenue_data]  # Scale customers
    
    performance_data = pd.DataFrame({{
        'month': meses,
        'revenue': revenue_data,
        'transactions': transactions,
        'new_customers': new_customers
    }})
    
    # Category performance
    categories_data = pd.DataFrame({{
        'category': {categories},
        'revenue': [int(sum(revenue_data) * (0.5 + i * 0.2) / len({categories})) for i in range(len({categories}))],
        'growth': [round(10 + i * 5 + np.random.normal(0, 3), 1) for i in range(len({categories}))]
    }})
    
    # Customer segments
    segments_data = pd.DataFrame({{
        'segment': {customers},
        'count': [1000 + i * 500 + int(np.random.normal(0, 100)) for i in range(len({customers}))],
        'avg_value': [500 + i * 200 + int(np.random.normal(0, 50)) for i in range(len({customers}))],
        'churn_risk': [round(0.1 + i * 0.05 + np.random.normal(0, 0.02), 2) for i in range(len({customers}))]
    }})
    
    # Support tickets simulation
    num_days = 120
    support_data = pd.DataFrame({{
        'date': pd.date_range('2024-01-01', periods=num_days, freq='D'),
        'tickets': [10 + int(np.random.normal(0, 3)) + (5 if i % 7 in [0, 6] else 0) for i in range(num_days)],
        'satisfaction': [4.2 + np.random.normal(0, 0.3) for _ in range(num_days)]
    }})
    
    return performance_data, categories_data, segments_data, support_data

def display_metric_card(title: str, value: str, delta: str = None, delta_color: str = "normal"):
    """Display custom metric card"""
    delta_html = ""
    if delta:
        color = COMPANY_COLORS['accent'] if delta_color == "normal" else COMPANY_COLORS['danger']
        delta_html = f'<p style="color: {{color}}; font-size: 0.9rem; margin: 0;">{{delta}}</p>'
    
    st.markdown(f"""
    <div class="metric-card">
        <h4 style="margin: 0; color: {{COMPANY_COLORS['neutral']}};">{{title}}</h4>
        <h2 style="margin: 0.5rem 0; color: {{COMPANY_COLORS['primary']}};">{{value}}</h2>
        {{delta_html}}
    </div>
    """, unsafe_allow_html=True)'''
    
    def _generate_sidebar(self, company_name: str, template: Dict[str, Any], website_info: Dict[str, Any]) -> str:
        """Generate the sidebar navigation"""
        safe_company_name = company_name.replace("'", "\\'")
        domain = website_info.get('domain', 'company.com')
        
        return f'''# =====================================================
# MAIN HEADER & NAVIGATION
# =====================================================

st.markdown("""
<div class="main-header">
    <h1>{template['icon']} {safe_company_name}</h1>
    <h3>Snowflake Cortex - {template['name']} Analytics & AI Demo</h3>
    <p>Transforming {template['name'].lower()} operations with intelligent data analytics and predictive insights</p>
</div>
""", unsafe_allow_html=True)

with st.sidebar:
    st.image(f"https://via.placeholder.com/200x80/{template['primary_color'][1:]}/FFFFFF?text={company_name.replace(' ', '+')}", 
             caption="{template['name']}")
    
    st.markdown("### 🧭 Navigation")
    
    demo_section = st.radio(
        "Select a section:",
        [
            "🏠 Introduction",
            "📊 Executive Dashboard",
            "🤖 Cortex Analyst", 
            "🔍 Cortex Search",
            "🎯 AISQL Multimodal",
            "📈 ML Predictive",
            "⚠️ Alerts & Monitoring"
        ]
    )
    
    st.markdown("---")
    
    st.markdown("### ⚙️ Configuration")
    use_simulation = st.checkbox("Use simulated data", value=True, 
                                help="Enable for demo without Snowflake connection")
    
    if not use_simulation:
        st.text_input("Snowflake Account", placeholder="abc12345.us-east-1")
        st.text_input("Username", placeholder="user@{domain}")
        st.text_input("Password", type="password")
    
    st.markdown("---")
    
    st.markdown("### ℹ️ Information")
    st.info(f"""
    **Demo Kit v1.0**
    
    This application demonstrates the complete capabilities of Snowflake Cortex for {template['name'].lower()} analytics.
    
    🎯 **Included use cases:**
    - Performance analytics and forecasting
    - Customer behavior analysis
    - Operational optimization
    - Predictive insights
    """)'''
    
    def _generate_introduction(self, company_name: str, template: Dict[str, Any], sample_data: Dict[str, Any]) -> str:
        """Generate the introduction section"""
        safe_company_name = company_name.replace("'", "\\'")
        use_cases = sample_data['use_cases']
        
        return f'''# =====================================================
# SECTION 0: INTRODUCTION
# =====================================================

if demo_section == "🏠 Introduction":
    st.markdown('<h2 class="section-header">🏠 Welcome to {safe_company_name} Cortex Demo</h2>', unsafe_allow_html=True)
    
    col1, col2 = st.columns([2, 1])
    
    with col1:
        st.markdown(f"""
        ## {template['icon']} **Revolutionizing {template['name']} with Snowflake Cortex**
        
        Welcome to {safe_company_name}'s comprehensive demonstration of **Snowflake Cortex AI capabilities for {template['name'].lower()}**. 
        This interactive application showcases how modern {template['name'].lower()} organizations can leverage artificial intelligence 
        to transform their operations, decision-making processes, and customer experiences.
        
        ### 🎯 **What You'll Experience**
        
        This demo simulates {safe_company_name}'s **real business environment** where advanced analytics and AI 
        power data-driven decisions across all operational areas.
        """)
    
    with col2:
        st.markdown("### 📊 **Demo Highlights**")
        
        metrics_data = [
            {{"icon": "{template['icon']}", "value": "Live", "label": "Demo Environment"}},
            {{"icon": "📊", "value": "25+", "label": "AI Functions"}},
            {{"icon": "🎯", "value": "6", "label": "Use Cases"}},
            {{"icon": "📈", "value": "12", "label": "Predictive Models"}}
        ]
        
        for metric in metrics_data:
            st.markdown(f"""
            <div style="background: white; padding: 0.8rem; border-radius: 8px; margin-bottom: 0.5rem; 
                        border-left: 4px solid {{COMPANY_COLORS['primary']}}; text-align: center;">
                <div style="font-size: 1.5rem;">{{metric['icon']}}</div>
                <div style="font-size: 1.2rem; font-weight: bold; color: {{COMPANY_COLORS['primary']}};">{{metric['value']}}</div>
                <div style="font-size: 0.9rem; color: {{COMPANY_COLORS['neutral']}};">{{metric['label']}}</div>
            </div>
            """, unsafe_allow_html=True)
    
    st.markdown("---")
    
    st.markdown("## 🧠 **Snowflake Cortex AI Features for {template['name']}**")
    
    features = [
        {{
            "title": "🤖 Cortex Analyst",
            "description": "Natural language queries for {template['name'].lower()} analytics",
            "functions": ["Performance Analysis", "Customer Insights", "Operational Intelligence"],
            "business_value": "Enable business users to query data without technical knowledge",
            "demo_highlight": "Ask complex business questions in plain English"
        }},
        {{
            "title": "🔍 Cortex Search",
            "description": "Intelligent search across documents and knowledge base",
            "functions": ["Document Search", "Policy Retrieval", "Knowledge Mining"],
            "business_value": "Instant access to organizational knowledge and procedures",
            "demo_highlight": "Search through policies, procedures, and documentation"
        }},
        {{
            "title": "🎯 AISQL Multimodal",
            "description": "AI-powered analysis of text and structured data",
            "functions": ["Text Analysis", "Data Classification", "Pattern Recognition"],
            "business_value": "Automate data analysis and extract actionable insights",
            "demo_highlight": "Analyze customer feedback and operational data automatically"
        }},
        {{
            "title": "📈 ML Predictive",
            "description": "Advanced forecasting and predictive analytics",
            "functions": ["Demand Forecasting", "Risk Assessment", "Performance Prediction"],
            "business_value": "Predict trends and optimize operations proactively",
            "demo_highlight": "Forecast performance and identify potential issues"
        }}
    ]
    
    tab1, tab2, tab3, tab4 = st.tabs([f['title'] for f in features])
    tabs = [tab1, tab2, tab3, tab4]
    
    for i, (tab, feature) in enumerate(zip(tabs, features)):
        with tab:
            st.markdown(f"### {{feature['description']}}")
            
            col1, col2 = st.columns(2)
            
            with col1:
                st.markdown("#### 🔧 **Key Functions**")
                for func in feature['functions']:
                    st.write(f"• {{func}}")
                
                st.markdown("#### 💼 **Business Value**")
                st.write(f"*{{feature['business_value']}}*")
            
            with col2:
                st.markdown("#### 💡 **Try This Demo**")
                st.info(feature['demo_highlight'])
                
                if 'Analyst' in feature['title']:
                    st.code("SELECT performance, category FROM analytics WHERE period = 'current'", language='sql')
                elif 'Search' in feature['title']:
                    st.code("SEARCH('company policies') IN knowledge_base", language='sql')
                elif 'AISQL' in feature['title']:
                    st.code("SELECT SNOWFLAKE.CORTEX.SENTIMENT(customer_feedback)", language='sql')
                elif 'ML' in feature['title']:
                    st.code("SELECT FORECAST(performance) FROM historical_data", language='sql')
    
    st.markdown("---")
    
    st.markdown("## 💼 **Business Impact & ROI for {template['name']}**")
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.markdown(f"""
        ### 📈 **Operational Excellence**
        
        <div style="background: {{COMPANY_COLORS['accent']}}15; padding: 1rem; border-radius: 8px;">
            <ul style="color: {{COMPANY_COLORS['neutral']}};">
                <li><strong>40% improvement</strong> in operational efficiency</li>
                <li><strong>25% reduction</strong> in manual processes</li>
                <li><strong>30% faster</strong> decision-making</li>
                <li><strong>50% improvement</strong> in forecast accuracy</li>
            </ul>
        </div>
        """, unsafe_allow_html=True)
    
    with col2:
        st.markdown(f"""
        ### 🎯 **Customer Experience**
        
        <div style="background: {{COMPANY_COLORS['warning']}}15; padding: 1rem; border-radius: 8px;">
            <ul style="color: {{COMPANY_COLORS['neutral']}};">
                <li><strong>Personalized insights</strong> for every stakeholder</li>
                <li><strong>Real-time visibility</strong> across all operations</li>
                <li><strong>Automated analysis</strong> of customer feedback</li>
                <li><strong>Predictive support</strong> and recommendations</li>
            </ul>
        </div>
        """, unsafe_allow_html=True)
    
    with col3:
        st.markdown(f"""
        ### 🚀 **Competitive Advantage**
        
        <div style="background: {{COMPANY_COLORS['primary']}}15; padding: 1rem; border-radius: 8px;">
            <ul style="color: {{COMPANY_COLORS['neutral']}};">
                <li><strong>AI-powered</strong> decision making</li>
                <li><strong>Scalable</strong> analytics platform</li>
                <li><strong>Integrated</strong> data ecosystem</li>
                <li><strong>Future-ready</strong> technology foundation</li>
            </ul>
        </div>
        """, unsafe_allow_html=True)
    
    st.markdown("---")
    st.markdown("## 🎯 **Ready to Explore?**")
    
    st.markdown(f"""
    <div style="background: linear-gradient(135deg, {{COMPANY_COLORS['primary']}} 0%, {{COMPANY_COLORS['secondary']}} 100%); 
                color: white; padding: 2rem; border-radius: 12px; text-align: center;">
        <h3 style="margin: 0 0 1rem 0;">Start Your Journey</h3>
        <p style="margin: 0 0 1.5rem 0; font-size: 1.1rem;">
            Use the navigation menu on the left to explore different Snowflake Cortex capabilities. 
            Each section includes interactive demos with real {template['name'].lower()} scenarios.
        </p>
        <div style="display: flex; justify-content: center; gap: 1rem; flex-wrap: wrap;">
            <div style="background: rgba(255,255,255,0.2); padding: 0.5rem 1rem; border-radius: 6px;">
                📊 Start with Executive Dashboard
            </div>
            <div style="background: rgba(255,255,255,0.2); padding: 0.5rem 1rem; border-radius: 6px;">
                🤖 Try Natural Language Queries
            </div>
            <div style="background: rgba(255,255,255,0.2); padding: 0.5rem 1rem; border-radius: 6px;">
                🔍 Search Knowledge Base
            </div>
        </div>
    </div>
    """, unsafe_allow_html=True)'''
    
    def _generate_dashboard(self, company_name: str, template: Dict[str, Any], sample_data: Dict[str, Any]) -> str:
        """Generate the executive dashboard section"""
        metrics = sample_data['metrics']
        
        return f'''# =====================================================
# SECTION 1: EXECUTIVE DASHBOARD
# =====================================================

elif demo_section == "📊 Executive Dashboard":
    st.markdown('<h2 class="section-header">📊 Executive Dashboard</h2>', unsafe_allow_html=True)
    
    if use_simulation:
        performance_data, categories_data, segments_data, support_data = simulate_business_data()
    else:
        # Real Snowflake queries would go here
        performance_data = execute_query("SELECT * FROM performance_summary ORDER BY month")
        categories_data = execute_query("SELECT * FROM category_performance")
        segments_data = execute_query("SELECT * FROM customer_segments")
        support_data = execute_query("SELECT * FROM support_metrics")
    
    # Key metrics
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        latest_revenue = performance_data['revenue'].iloc[-1] if not performance_data.empty else 0
        prev_revenue = performance_data['revenue'].iloc[-2] if len(performance_data) > 1 else latest_revenue
        growth = ((latest_revenue - prev_revenue) / prev_revenue * 100) if prev_revenue > 0 else 0
        
        display_metric_card(
            "{metrics[0]}", 
            f"${{latest_revenue:,.0f}}K", 
            f"↗️ {{growth:+.1f}}% vs previous month"
        )
    
    with col2:
        latest_transactions = performance_data['transactions'].iloc[-1] if not performance_data.empty else 0
        display_metric_card(
            "Transactions", 
            f"{{latest_transactions:,.0f}}K", 
            "↗️ +12% vs previous month"
        )
    
    with col3:
        latest_customers = performance_data['new_customers'].iloc[-1] if not performance_data.empty else 0
        display_metric_card(
            "New Customers", 
            f"{{latest_customers:,.0f}}K", 
            "↗️ +8% vs previous month"
        )
    
    with col4:
        display_metric_card(
            "System Health", 
            "98.5%", 
            "✅ All systems operational"
        )
    
    # Main charts
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("### 📈 Performance Trend")
        if not performance_data.empty:
            fig_performance = px.line(
                performance_data, 
                x='month', 
                y='revenue',
                title="Monthly Performance Evolution",
                color_discrete_sequence=[COMPANY_COLORS['primary']]
            )
            fig_performance.update_layout(
                plot_bgcolor='rgba(0,0,0,0)',
                paper_bgcolor='rgba(0,0,0,0)'
            )
            st.plotly_chart(fig_performance, use_container_width=True)
    
    with col2:
        st.markdown("### 🎯 Category Performance")
        if not categories_data.empty:
            fig_categories = px.bar(
                categories_data.head(6), 
                x='revenue', 
                y='category',
                orientation='h',
                title="Top Categories by Revenue",
                color='growth',
                color_continuous_scale=['red', 'yellow', 'green']
            )
            fig_categories.update_layout(
                plot_bgcolor='rgba(0,0,0,0)',
                paper_bgcolor='rgba(0,0,0,0)'
            )
            st.plotly_chart(fig_categories, use_container_width=True)
    
    # Customer segments and support
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("### 👥 Customer Segments")
        if not segments_data.empty:
            for _, segment in segments_data.iterrows():
                risk_level = "HIGH" if segment['churn_risk'] > 0.15 else "MEDIUM" if segment['churn_risk'] > 0.08 else "LOW"
                risk_color = {{'HIGH': 'alert-danger', 'MEDIUM': 'alert-warning', 'LOW': 'alert-success'}}[risk_level]
                
                st.markdown(f"""
                <div class="alert-box {{risk_color}}">
                    <strong>{{segment['segment']}}</strong><br>
                    Count: {{segment['count']:,}} | Avg Value: ${{segment['avg_value']:,}}<br>
                    Churn Risk: {{segment['churn_risk']:.1%}} ({{risk_level}})
                </div>
                """, unsafe_allow_html=True)
    
    with col2:
        st.markdown("### 📞 Support Metrics")
        
        if not support_data.empty:
            avg_satisfaction = support_data['satisfaction'].mean()
            recent_tickets = support_data['tickets'].tail(7).sum()
            
            col_a, col_b = st.columns(2)
            with col_a:
                st.metric("Weekly Tickets", f"{{recent_tickets:,.0f}}", "↓ -5%")
            with col_b:
                st.metric("Satisfaction", f"{{avg_satisfaction:.1f}}/5.0", "↗️ +0.2")
            
            # Support trend
            recent_support = support_data.tail(30)
            fig_support = px.line(
                recent_support,
                x='date',
                y='satisfaction',
                title="Customer Satisfaction Trend (30 days)",
                color_discrete_sequence=[COMPANY_COLORS['accent']]
            )
            fig_support.add_hline(y=4.0, line_dash="dash", line_color="green", annotation_text="Target: 4.0")
            st.plotly_chart(fig_support, use_container_width=True)'''
    
    def _generate_cortex_analyst(self, company_name: str, template: Dict[str, Any], industry: str) -> str:
        """Generate the Cortex Analyst section"""
        return f'''# =====================================================
# SECTION 2: CORTEX ANALYST
# =====================================================

elif demo_section == "🤖 Cortex Analyst":
    st.markdown('<h2 class="section-header">🤖 Cortex Analyst - Natural Language Analytics</h2>', unsafe_allow_html=True)
    
    st.markdown("""
    Cortex Analyst allows business users to ask questions about data in natural language. 
    The semantic model automatically translates questions to SQL and provides accurate insights.
    """)
    
    st.markdown("### 💡 Sample Questions")
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        if st.button("What was our performance last quarter?"):
            st.session_state['analyst_query'] = "What was our performance last quarter?"
    
    with col2:
        if st.button("Which categories are growing fastest?"):
            st.session_state['analyst_query'] = "Which categories are growing fastest?"
    
    with col3:
        if st.button("Show customer segment analysis"):
            st.session_state['analyst_query'] = "Show customer segment analysis"
    
    st.markdown("### 🗣️ Ask Your Question")
    
    user_question = st.text_input(
        "Ask about your business data:",
        value=st.session_state.get('analyst_query', ''),
        placeholder="Example: How are we performing compared to last year?"
    )
    
    if st.button("🔍 Analyze") and user_question:
        with st.spinner("Cortex Analyst is processing your question..."):
            
            st.markdown("#### 🤖 Cortex Analyst Response:")
            
            if "performance" in user_question.lower() and "quarter" in user_question.lower():
                st.success("""
                **Analysis Completed** ✅
                
                **Q3 Performance Summary:**
                - Total Revenue: $2.8M (↗️ +12.5% vs Q2)
                - Transactions: 145K (↗️ +8.2% vs Q2)
                - New Customers: 8.5K (↗️ +15.1% vs Q2)
                
                **Key Insights:**
                - Strong growth across all metrics
                - Customer acquisition accelerating
                - Revenue per transaction improving
                """)
                
            elif "categories" in user_question.lower() or "growing" in user_question.lower():
                st.success("""
                **Analysis Completed** ✅
                
                **Fastest Growing Categories:**
                1. {template['name']} Category A: +25.2% YoY
                2. {template['name']} Category B: +18.7% YoY  
                3. {template['name']} Category C: +15.4% YoY
                
                **Growth Drivers:**
                - Increased market demand
                - Improved product offerings
                - Enhanced customer experience
                """)
                
            elif "segment" in user_question.lower():
                st.success("""
                **Analysis Completed** ✅
                
                **Customer Segment Performance:**
                - Premium Segment: Highest value, lowest churn
                - Professional Segment: Fastest growth +22%
                - Family Segment: Most stable, consistent spend
                
                **Recommendations:**
                - Expand premium offerings
                - Focus retention on professional segment
                - Maintain family segment satisfaction
                """)
            
            else:
                st.info(f"""
                **Processing:** "{{user_question}}"
                
                🔄 Cortex Analyst is analyzing your question...
                
                In a real implementation, you would see:
                1. **Automatically generated SQL** query
                2. **Precise results** from your data
                3. **Interactive visualizations**
                4. **AI-generated insights** and recommendations
                """)
    
    st.markdown("### 🧠 Semantic Model Capabilities")
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("""
        **📊 Available Metrics:**
        - Revenue and Growth
        - Customer Acquisition
        - Performance Indicators
        - Operational Metrics
        - Quality Measures
        - Efficiency Ratios
        """)
    
    with col2:
        st.markdown("""
        **🎯 Dimensions Available:**
        - Time (Year, Quarter, Month, Week)
        - Geography (Region, Location)
        - Categories and Products
        - Customer Segments
        - Operational Units
        - Performance Areas
        """)'''
    
    def _generate_cortex_search(self, company_name: str, template: Dict[str, Any], industry: str) -> str:
        """Generate the Cortex Search section"""
        return f'''# =====================================================
# SECTION 3: CORTEX SEARCH
# =====================================================

elif demo_section == "🔍 Cortex Search":
    st.markdown('<h2 class="section-header">🔍 Cortex Search - Intelligent Knowledge Search</h2>', unsafe_allow_html=True)
    
    st.markdown("""
    Cortex Search uses RAG (Retrieval-Augmented Generation) to search information across 
    your organization's knowledge base, policies, and documentation.
    """)
    
    st.markdown("### 📚 Available Knowledge Base")
    
    documents = [
        f"📋 {company_name} - Operating Procedures Manual",
        f"📊 {template['name']} Performance Standards Guide", 
        f"📈 Business Intelligence Best Practices",
        f"⚙️ System Administration Guidelines",
        f"🎯 Strategic Planning Framework 2024"
    ]
    
    selected_docs = st.multiselect(
        "Select documents to search:",
        documents,
        default=documents[:3]
    )
    
    st.markdown("### 🔍 Quick Search Examples")
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        if st.button("📋 Operating Procedures"):
            st.session_state['search_query'] = "What are the standard operating procedures?"
    
    with col2:
        if st.button("📊 Performance Standards"):
            st.session_state['search_query'] = "What are our performance benchmarks?"
    
    with col3:
        if st.button("🎯 Strategic Guidelines"):
            st.session_state['search_query'] = "What are our strategic priorities?"
    
    search_query = st.text_input(
        "🔍 Search knowledge base:",
        value=st.session_state.get('search_query', ''),
        placeholder="Example: What are the quality standards for our operations?"
    )
    
    if st.button("🚀 Search") and search_query:
        with st.spinner("Cortex Search is analyzing documents..."):
            
            st.markdown("#### 🎯 Search Results:")
            
            if "procedure" in search_query.lower() or "operating" in search_query.lower():
                st.markdown(f"""
                **📋 {company_name} Operating Procedures** - Relevance: 95%
                
                > **Standard Operating Procedures include:**  
                > • Quality control checkpoints at each stage  
                > • Performance monitoring protocols  
                > • Escalation procedures for issues  
                > • Regular review and update cycles
                
                📍 **Section 3.2** | 🔗 [View full document]
                """)
                
            elif "performance" in search_query.lower() or "standard" in search_query.lower():
                st.markdown(f"""
                **📊 {template['name']} Performance Standards** - Relevance: 92%
                
                > **Key Performance Indicators:**  
                > • Operational efficiency: >85%  
                > • Customer satisfaction: >4.0/5.0  
                > • Quality metrics: >95% compliance  
                > • Response time: <24 hours
                
                📍 **Section 2.1** | 🔗 [View full document]
                """)
                
            elif "strategic" in search_query.lower() or "priorities" in search_query.lower():
                st.markdown(f"""
                **🎯 Strategic Planning Framework** - Relevance: 88%
                
                > **2024 Strategic Priorities:**  
                > • Digital transformation initiatives  
                > • Customer experience enhancement  
                > • Operational excellence programs  
                > • Innovation and growth projects
                
                📍 **Executive Summary** | 🔗 [View full document]
                """)
                
            else:
                st.info(f"""
                **Searching:** "{{search_query}}"
                
                🔄 Cortex Search is processing your query across {{len(selected_docs)}} documents...
                
                In a real implementation, you would see:
                1. **Relevant document sections** with high precision
                2. **Contextual snippets** answering your question
                3. **Source references** with page numbers
                4. **Related suggestions** for further exploration
                """)
    
    st.markdown("### 📊 Knowledge Base Statistics")
    
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.metric("Documents", "5", "")
    with col2:
        st.metric("Total Pages", "847", "")
    with col3:
        st.metric("Searches Today", "124", "↑ 18%")
    with col4:
        st.metric("Avg Relevance", "91.2%", "↑ 3.1%")'''
    
    def _generate_aisql_multimodal(self, company_name: str, template: Dict[str, Any], industry: str) -> str:
        """Generate the AISQL Multimodal section"""
        return f'''# =====================================================
# SECTION 4: AISQL MULTIMODAL
# =====================================================

elif demo_section == "🎯 AISQL Multimodal":
    st.markdown('<h2 class="section-header">🎯 AISQL Multimodal - Intelligent Data Analysis</h2>', unsafe_allow_html=True)
    
    st.markdown("""
    AISQL multimodal functions enable AI-powered analysis of text, structured data, and other content 
    directly within SQL, extracting valuable insights automatically.
    """)
    
    tab1, tab2, tab3, tab4 = st.tabs([
        "📝 Text Analysis", 
        "📊 Data Intelligence", 
        "🔍 Pattern Recognition",
        "🔧 Use Cases"
    ])
    
    with tab1:
        st.markdown("### 📝 Intelligent Text Analysis")
        
        sample_feedback = [
            {{
                'id': 'FB-2024-001',
                'source': 'Customer Feedback',
                'text': 'The service quality has been exceptional this quarter. The team response time improved significantly and the overall experience exceeded expectations.',
                'category': 'Service Quality'
            }},
            {{
                'id': 'FB-2024-002', 
                'source': 'Operational Review',
                'text': 'We need to address the bottleneck in our process flow. The current system creates delays that impact our delivery timelines and customer satisfaction.',
                'category': 'Process Improvement'
            }},
            {{
                'id': 'FB-2024-003',
                'source': 'Performance Metrics',
                'text': 'Outstanding results this month with all KPIs exceeding targets. The new initiatives are showing positive impact across all operational areas.',
                'category': 'Performance'
            }}
        ]
        
        selected_feedback = st.selectbox(
            "Select feedback to analyze:",
            [f"{{f['id']}} - {{f['source']}}" for f in sample_feedback]
        )
        
        feedback_idx = next(i for i, f in enumerate(sample_feedback) if f['id'] in selected_feedback)
        feedback = sample_feedback[feedback_idx]
        
        st.markdown("#### 📋 Content:")
        st.write(f"**Source:** {{feedback['source']}}")
        st.write(f"**Text:** {{feedback['text']}}")
        
        if st.button("🔍 Analyze with AISQL"):
            with st.spinner("Processing with AISQL functions..."):
                
                col1, col2 = st.columns(2)
                
                with col1:
                    st.markdown("#### 🎯 Sentiment Analysis")
                    
                    if 'exceptional' in feedback['text'].lower() or 'outstanding' in feedback['text'].lower():
                        sentiment = 'POSITIVE'
                        score = 0.85
                        color = COMPANY_COLORS['accent']
                    elif 'bottleneck' in feedback['text'].lower() or 'delays' in feedback['text'].lower():
                        sentiment = 'NEGATIVE'
                        score = -0.6
                        color = COMPANY_COLORS['danger']
                    else:
                        sentiment = 'NEUTRAL'
                        score = 0.1
                        color = COMPANY_COLORS['neutral']
                    
                    st.markdown(f"""
                    <div style="background: {{color}}15; padding: 1rem; border-radius: 8px; border-left: 4px solid {{color}};">
                        <strong>Sentiment:</strong> {{sentiment}}<br>
                        <strong>Score:</strong> {{score:.2f}}<br>
                        <strong>Confidence:</strong> 92%
                    </div>
                    """, unsafe_allow_html=True)
                
                with col2:
                    st.markdown("#### 🏷️ Classification")
                    
                    if feedback['category'] == 'Service Quality':
                        classification = 'Customer Experience'
                        priority = 'HIGH'
                        action = 'Maintain Excellence'
                    elif feedback['category'] == 'Process Improvement':
                        classification = 'Operational Issue'
                        priority = 'CRITICAL'
                        action = 'Immediate Review'
                    else:
                        classification = 'Performance Review'
                        priority = 'MEDIUM'
                        action = 'Continue Monitoring'
                    
                    st.markdown(f"""
                    <div style="background: white; padding: 1rem; border-radius: 8px; border: 1px solid #e5e7eb;">
                        <strong>Category:</strong> {{classification}}<br>
                        <strong>Priority:</strong> {{priority}}<br>
                        <strong>Recommended Action:</strong> {{action}}
                    </div>
                    """, unsafe_allow_html=True)
                
                st.markdown("#### 💡 Key Insights Extracted")
                
                if 'exceptional' in feedback['text'].lower():
                    insights = [
                        "🌟 High customer satisfaction indicator",
                        "⚡ Improved response time noted",
                        "📈 Performance exceeding expectations",
                        "🎯 Positive trend for service quality"
                    ]
                elif 'bottleneck' in feedback['text'].lower():
                    insights = [
                        "⚠️ Process bottleneck identified",
                        "⏱️ Delivery timeline impact detected",
                        "😞 Customer satisfaction risk",
                        "🔧 System optimization required"
                    ]
                else:
                    insights = [
                        "📊 All KPIs exceeding targets",
                        "🚀 New initiatives showing impact",
                        "✅ Positive operational performance",
                        "📈 Consistent improvement trend"
                    ]
                
                for insight in insights:
                    st.write(insight)
    
    with tab2:
        st.markdown("### 📊 Data Intelligence Analysis")
        
        st.markdown("#### 🔍 Automated Data Classification")
        
        if st.button("🧠 Analyze Current Data Patterns"):
            with st.spinner("Analyzing data patterns with AI..."):
                
                st.success("""
                **Pattern Analysis Complete** ✅
                
                **Data Quality Assessment:**
                - Completeness: 94.2% (↗️ +2.1%)
                - Accuracy: 96.8% (↗️ +1.3%)
                - Consistency: 92.4% (→ stable)
                
                **Trend Detection:**
                - Seasonal pattern identified in performance data
                - Growth correlation between categories A and B
                - Anomaly detection: 3 outliers in recent period
                
                **Recommendations:**
                - Focus on data completion for segments with <90%
                - Investigate outliers in recent performance data
                - Leverage seasonal patterns for forecasting
                """)
                
                # Show data quality visualization
                quality_data = pd.DataFrame({{
                    'metric': ['Completeness', 'Accuracy', 'Consistency', 'Timeliness'],
                    'score': [94.2, 96.8, 92.4, 98.1],
                    'target': [95, 95, 95, 95]
                }})
                
                fig_quality = px.bar(
                    quality_data,
                    x='metric',
                    y=['score', 'target'],
                    title="Data Quality Metrics",
                    barmode='group',
                    color_discrete_sequence=[COMPANY_COLORS['primary'], COMPANY_COLORS['neutral']]
                )
                st.plotly_chart(fig_quality, use_container_width=True)
    
    with tab3:
        st.markdown("### 🔍 Pattern Recognition")
        
        st.markdown("#### 📈 Automated Pattern Discovery")
        
        pattern_types = st.multiselect(
            "Select pattern types to analyze:",
            ["Seasonal Trends", "Correlation Analysis", "Anomaly Detection", "Growth Patterns"],
            default=["Seasonal Trends", "Correlation Analysis"]
        )
        
        if st.button("🔍 Discover Patterns") and pattern_types:
            with st.spinner("Discovering patterns in your data..."):
                
                results = []
                
                if "Seasonal Trends" in pattern_types:
                    results.append({{
                        'type': 'Seasonal Trends',
                        'finding': 'Strong quarterly seasonality detected with 15% variation',
                        'confidence': '89%',
                        'impact': 'HIGH'
                    }})
                
                if "Correlation Analysis" in pattern_types:
                    results.append({{
                        'type': 'Correlation Analysis', 
                        'finding': 'Strong positive correlation (0.82) between categories A and C',
                        'confidence': '94%',
                        'impact': 'MEDIUM'
                    }})
                
                if "Anomaly Detection" in pattern_types:
                    results.append({{
                        'type': 'Anomaly Detection',
                        'finding': '3 anomalous data points detected in recent performance',
                        'confidence': '76%',
                        'impact': 'MEDIUM'
                    }})
                
                if "Growth Patterns" in pattern_types:
                    results.append({{
                        'type': 'Growth Patterns',
                        'finding': 'Accelerating growth trend in premium segment (+25% MoM)',
                        'confidence': '91%',
                        'impact': 'HIGH'
                    }})
                
                for result in results:
                    impact_color = {{
                        'HIGH': COMPANY_COLORS['accent'],
                        'MEDIUM': COMPANY_COLORS['warning'],
                        'LOW': COMPANY_COLORS['neutral']
                    }}[result['impact']]
                    
                    st.markdown(f"""
                    <div style="background: white; padding: 1rem; border-radius: 8px; margin-bottom: 1rem; border-left: 4px solid {{impact_color}};">
                        <h4 style="color: {{COMPANY_COLORS['primary']}}; margin: 0;">{{result['type']}}</h4>
                        <p style="margin: 0.5rem 0;">{{result['finding']}}</p>
                        <small>Confidence: {{result['confidence']}} | Impact: {{result['impact']}}</small>
                    </div>
                    """, unsafe_allow_html=True)
    
    with tab4:
        st.markdown("### 🔧 Advanced Use Cases")
        
        use_cases = [
            {{
                'title': '🎯 Automated Content Classification',
                'description': 'Classify documents, feedback, and communications automatically',
                'example': "SNOWFLAKE.CORTEX.CLASSIFY(content, ['Positive', 'Negative', 'Neutral'])",
                'benefit': 'Reduce manual categorization time by 80%'
            }},
            {{
                'title': '💬 Sentiment Analysis at Scale',
                'description': 'Analyze sentiment across thousands of customer interactions',
                'example': "SNOWFLAKE.CORTEX.SENTIMENT(customer_feedback)",
                'benefit': 'Real-time customer satisfaction monitoring'
            }},
            {{
                'title': '📄 Document Summarization',
                'description': 'Generate executive summaries from lengthy reports',
                'example': "SNOWFLAKE.CORTEX.SUMMARIZE(report_content)",
                'benefit': 'Save executives 75% of reading time'
            }},
            {{
                'title': '🔍 Information Extraction',
                'description': 'Extract specific information from unstructured text',
                'example': "SNOWFLAKE.CORTEX.EXTRACT_ANSWER(content, 'What are the key risks?')",
                'benefit': 'Automate data extraction from complex documents'
            }}
        ]
        
        for case in use_cases:
            with st.expander(f"{{case['title']}}"):
                st.markdown(f"**Description:** {{case['description']}}")
                st.code(case['example'], language='sql')
                st.success(f"💼 **Benefit:** {{case['benefit']}}")'''
    
    def _generate_ml_predictive(self, company_name: str, template: Dict[str, Any], industry: str) -> str:
        """Generate the ML Predictive section"""
        return f'''# =====================================================
# SECTION 5: ML PREDICTIVE
# =====================================================

elif demo_section == "📈 ML Predictive":
    st.markdown('<h2 class="section-header">📈 Machine Learning Predictive Analytics</h2>', unsafe_allow_html=True)
    
    st.markdown("""
    Leverage Snowflake's built-in ML capabilities for forecasting, anomaly detection, 
    and predictive analytics to optimize operations and anticipate future trends.
    """)
    
    tab1, tab2, tab3, tab4 = st.tabs([
        "📊 Forecasting", 
        "⚠️ Anomaly Detection", 
        "🎯 Predictive Insights",
        "📈 Trend Analysis"
    ])
    
    with tab1:
        st.markdown("### 📊 Performance Forecasting")
        
        # Generate forecast data
        forecast_data = pd.DataFrame({{
            'month': pd.date_range('2024-01-01', '2024-12-01', freq='M'),
            'historical': [1200, 1350, 1280, 1400, None, None, None, None, None, None, None, None],
            'forecast': [None, None, None, None, 1450, 1520, 1480, 1600, 1550, 1680, 1620, 1750],
            'confidence_min': [None, None, None, None, 1350, 1420, 1380, 1500, 1450, 1580, 1520, 1650],
            'confidence_max': [None, None, None, None, 1550, 1620, 1580, 1700, 1650, 1780, 1720, 1850]
        }})
        
        # Forecast visualization
        fig_forecast = go.Figure()
        
        fig_forecast.add_trace(go.Scatter(
            x=forecast_data['month'],
            y=forecast_data['historical'],
            mode='lines+markers',
            name='Historical',
            line=dict(color=COMPANY_COLORS['primary'], width=3)
        ))
        
        fig_forecast.add_trace(go.Scatter(
            x=forecast_data['month'],
            y=forecast_data['forecast'],
            mode='lines+markers',
            name='Forecast',
            line=dict(color=COMPANY_COLORS['secondary'], width=3, dash='dash')
        ))
        
        fig_forecast.add_trace(go.Scatter(
            x=forecast_data['month'],
            y=forecast_data['confidence_max'],
            mode='lines',
            line=dict(width=0),
            showlegend=False,
            hoverinfo='skip'
        ))
        
        fig_forecast.add_trace(go.Scatter(
            x=forecast_data['month'],
            y=forecast_data['confidence_min'],
            mode='lines',
            line=dict(width=0),
            fill='tonexty',
            fillcolor=f'rgba(59, 130, 246, 0.2)',
            name='95% Confidence Interval',
            hoverinfo='skip'
        ))
        
        fig_forecast.update_layout(
            title="Performance Forecast 2024",
            xaxis_title="Month",
            yaxis_title="Performance Index",
            hovermode='x unified',
            plot_bgcolor='rgba(0,0,0,0)',
            paper_bgcolor='rgba(0,0,0,0)'
        )
        
        st.plotly_chart(fig_forecast, use_container_width=True)
        
        # Forecast metrics
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            st.metric("Next Month", "1,450", "↗️ +3.6%")
        with col2:
            st.metric("Q3 2024 Avg", "1,543", "↗️ +10.2%")
        with col3:
            st.metric("Annual Growth", "+16.8%", "vs 2023")
        with col4:
            st.metric("Model Accuracy", "92.4%", "↗️ +2.1%")
    
    with tab2:
        st.markdown("### ⚠️ Anomaly Detection")
        
        st.markdown("#### 🔍 Detected Anomalies")
        
        anomalies_data = pd.DataFrame({{
            'id': ['ANO-2024-012', 'ANO-2024-015', 'ANO-2024-018'],
            'date': ['2024-04-28', '2024-04-29', '2024-04-30'],
            'category': ['Performance Metric', 'Customer Behavior', 'Operational Data'],
            'anomaly_score': [0.89, 0.76, 0.91],
            'description': [
                'Performance metric 3.2x above normal range',
                'Unusual customer activity pattern detected', 
                'Operational data shows unexpected variance'
            ]
        }})
        
        for _, anomaly in anomalies_data.iterrows():
            severity = "🔴 CRITICAL" if anomaly['anomaly_score'] > 0.8 else "🟡 MODERATE"
            
            st.markdown(f"""
            <div class="alert-box alert-warning">
                <strong>{{anomaly['id']}}</strong> - {{severity}}<br>
                <strong>Category:</strong> {{anomaly['category']}}<br>
                <strong>Score:</strong> {{anomaly['anomaly_score']:.2f}} | <strong>Date:</strong> {{anomaly['date']}}<br>
                <strong>Description:</strong> {{anomaly['description']}}
            </div>
            """, unsafe_allow_html=True)
        
        # Anomaly distribution
        st.markdown("#### 📊 Anomaly Score Distribution")
        
        normal_scores = [0.1, 0.15, 0.08, 0.22, 0.18, 0.12, 0.25, 0.3, 0.2, 0.35] * 15
        anomaly_scores = [0.76, 0.89, 0.91, 0.72, 0.84]
        all_scores = normal_scores + anomaly_scores
        
        fig_anomaly = px.histogram(
            x=all_scores,
            nbins=20,
            title="Anomaly Score Distribution - Last 30 Days",
            labels={{'x': 'Anomaly Score', 'y': 'Frequency'}}
        )
        
        fig_anomaly.add_vline(x=0.7, line_dash="dash", line_color="red", 
                             annotation_text="Alert Threshold")
        
        st.plotly_chart(fig_anomaly, use_container_width=True)
        
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            st.metric("Anomalies Today", "3", "↑ +1")
        with col2:
            st.metric("False Positive Rate", "4.2%", "↓ -0.8%")
        with col3:
            st.metric("Detection Speed", "8 min", "avg response")
        with col4:
            st.metric("Model Precision", "94.7%", "↗️ +1.2%")
    
    with tab3:
        st.markdown("### 🎯 Predictive Insights")
        
        st.markdown("#### 🔮 Future Predictions")
        
        predictions = [
            {{
                'category': 'Performance Optimization',
                'prediction': 'Expected 15% improvement in efficiency over next quarter',
                'confidence': 87,
                'timeframe': '3 months',
                'impact': 'HIGH'
            }},
            {{
                'category': 'Customer Behavior',
                'prediction': 'Seasonal increase in activity anticipated in Q4',
                'confidence': 92,
                'timeframe': '6 months', 
                'impact': 'MEDIUM'
            }},
            {{
                'category': 'Operational Risk',
                'prediction': 'Low probability of service disruption detected',
                'confidence': 78,
                'timeframe': '1 month',
                'impact': 'LOW'
            }}
        ]
        
        for pred in predictions:
            impact_color = {{
                'HIGH': COMPANY_COLORS['accent'],
                'MEDIUM': COMPANY_COLORS['warning'],
                'LOW': COMPANY_COLORS['neutral']
            }}[pred['impact']]
            
            st.markdown(f"""
            <div style="background: white; padding: 1rem; border-radius: 8px; margin-bottom: 1rem; border-left: 4px solid {{impact_color}};">
                <h4 style="color: {{COMPANY_COLORS['primary']}}; margin: 0;">{{pred['category']}}</h4>
                <p style="margin: 0.5rem 0;">{{pred['prediction']}}</p>
                <div style="display: flex; justify-content: space-between; font-size: 0.9rem; color: {{COMPANY_COLORS['neutral']}};">
                    <span>Confidence: {{pred['confidence']}}%</span>
                    <span>Timeframe: {{pred['timeframe']}}</span>
                    <span>Impact: {{pred['impact']}}</span>
                </div>
            </div>
            """, unsafe_allow_html=True)
        
        st.markdown("#### 📊 Prediction Accuracy Tracking")
        
        accuracy_data = pd.DataFrame({{
            'model': ['Performance Forecasting', 'Behavior Prediction', 'Anomaly Detection', 'Trend Analysis'],
            'accuracy': [92.4, 87.6, 94.7, 89.3],
            'predictions_made': [156, 89, 234, 112]
        }})
        
        fig_accuracy = px.bar(
            accuracy_data,
            x='model',
            y='accuracy',
            title="Model Accuracy by Type",
            color='accuracy',
            color_continuous_scale=['red', 'yellow', 'green']
        )
        st.plotly_chart(fig_accuracy, use_container_width=True)
    
    with tab4:
        st.markdown("### 📈 Advanced Trend Analysis")
        
        trend_categories = st.multiselect(
            "Select categories for trend analysis:",
            {template['categories']},
            default={template['categories'][:3]}
        )
        
        if trend_categories:
            # Generate trend data
            months = pd.date_range('2023-01-01', '2024-04-01', freq='M')
            
            trend_data = pd.DataFrame({{
                'month': months,
                **{{cat: [100 + i * 5 + np.random.normal(0, 10) + (20 if 'Fashion' in cat else 10) * np.sin(i/6) 
                         for i in range(len(months))] for cat in trend_categories}}
            }})
            
            fig_trends = px.line(
                trend_data,
                x='month',
                y=trend_categories,
                title="Category Performance Trends",
                color_discrete_sequence=[COMPANY_COLORS['primary'], COMPANY_COLORS['secondary'], COMPANY_COLORS['accent']]
            )
            
            st.plotly_chart(fig_trends, use_container_width=True)
            
            # Trend insights
            st.markdown("#### 🔍 Trend Insights")
            
            insights = [
                f"📈 {{trend_categories[0]}} showing strong upward trend (+15% over 12 months)",
                f"📊 {{trend_categories[1] if len(trend_categories) > 1 else trend_categories[0]}} exhibits seasonal pattern with Q4 peaks",
                f"⚡ {{trend_categories[-1]}} demonstrates highest volatility but positive growth"
            ]
            
            for insight in insights:
                st.write(insight)
        
        st.markdown("#### 🎯 Strategic Recommendations")
        
        recommendations = [
            {{
                'focus_area': 'Growth Opportunities',
                'recommendation': 'Invest in high-performing categories showing consistent growth trends',
                'priority': 'HIGH'
            }},
            {{
                'focus_area': 'Risk Mitigation',
                'recommendation': 'Monitor volatile categories for potential stabilization strategies',
                'priority': 'MEDIUM'
            }},
            {{
                'focus_area': 'Seasonal Planning',
                'recommendation': 'Prepare for Q4 seasonal peaks with inventory and resource planning',
                'priority': 'HIGH'
            }}
        ]
        
        for rec in recommendations:
            priority_color = {{'HIGH': COMPANY_COLORS['danger'], 'MEDIUM': COMPANY_COLORS['warning']}}[rec['priority']]
            
            st.markdown(f"""
            <div style="background: white; padding: 1rem; border-radius: 8px; margin-bottom: 1rem; border-left: 4px solid {{priority_color}};">
                <h4 style="color: {{COMPANY_COLORS['primary']}}; margin: 0;">{{rec['focus_area']}}</h4>
                <p style="margin: 0.5rem 0;">{{rec['recommendation']}}</p>
                <span style="background: {{priority_color}}; color: white; padding: 0.2rem 0.5rem; border-radius: 4px; font-size: 0.8rem;">
                    {{rec['priority']}} PRIORITY
                </span>
            </div>
            """, unsafe_allow_html=True)'''
    
    def _generate_alerts_monitoring(self, company_name: str, template: Dict[str, Any], sample_data: Dict[str, Any]) -> str:
        """Generate the alerts and monitoring section"""
        return f'''# =====================================================
# SECTION 6: ALERTS & MONITORING
# =====================================================

elif demo_section == "⚠️ Alerts & Monitoring":
    st.markdown('<h2 class="section-header">⚠️ Real-Time Alerts & Monitoring</h2>', unsafe_allow_html=True)
    
    st.markdown("""
    Intelligent monitoring system using ML to detect patterns and generate proactive alerts 
    for operational teams and management.
    """)
    
    # Alert summary
    st.markdown("### 🚨 Active Alerts")
    
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.markdown(f"""
        <div style="background: {{COMPANY_COLORS['danger']}}15; padding: 1rem; border-radius: 8px; text-align: center; border: 2px solid {{COMPANY_COLORS['danger']}};">
            <h2 style="color: {{COMPANY_COLORS['danger']}}; margin: 0;">1</h2>
            <p style="margin: 0; font-weight: 500;">CRITICAL</p>
        </div>
        """, unsafe_allow_html=True)
    
    with col2:
        st.markdown(f"""
        <div style="background: {{COMPANY_COLORS['warning']}}15; padding: 1rem; border-radius: 8px; text-align: center; border: 2px solid {{COMPANY_COLORS['warning']}};">
            <h2 style="color: {{COMPANY_COLORS['warning']}}; margin: 0;">2</h2>
            <p style="margin: 0; font-weight: 500;">HIGH</p>
        </div>
        """, unsafe_allow_html=True)
    
    with col3:
        st.markdown(f"""
        <div style="background: {{COMPANY_COLORS['secondary']}}15; padding: 1rem; border-radius: 8px; text-align: center; border: 2px solid {{COMPANY_COLORS['secondary']}};">
            <h2 style="color: {{COMPANY_COLORS['secondary']}}; margin: 0;">5</h2>
            <p style="margin: 0; font-weight: 500;">MEDIUM</p>
        </div>
        """, unsafe_allow_html=True)
    
    with col4:
        st.markdown(f"""
        <div style="background: {{COMPANY_COLORS['accent']}}15; padding: 1rem; border-radius: 8px; text-align: center; border: 2px solid {{COMPANY_COLORS['accent']}};">
            <h2 style="color: {{COMPANY_COLORS['accent']}}; margin: 0;">23</h2>
            <p style="margin: 0; font-weight: 500;">RESOLVED TODAY</p>
        </div>
        """, unsafe_allow_html=True)
    
    # Priority alerts
    st.markdown("### 🔥 Priority Alerts")
    
    priority_alerts = [
        {{
            'id': 'ALT-CRIT-001',
            'type': 'Performance Anomaly',
            'severity': 'CRITICAL',
            'description': 'Performance metric exceeded normal range by 300% in the last hour',
            'entity': '{template["name"]} Operations',
            'time': '12 min',
            'score': 0.94
        }},
        {{
            'id': 'ALT-HIGH-002', 
            'type': 'Operational Alert',
            'severity': 'HIGH',
            'description': 'Unusual pattern detected in operational metrics',
            'entity': 'System Performance',
            'time': '25 min',
            'score': 0.78
        }},
        {{
            'id': 'ALT-HIGH-003',
            'type': 'Quality Threshold',
            'severity': 'HIGH', 
            'description': 'Quality metrics falling below established thresholds',
            'entity': 'Quality Control',
            'time': '18 min',
            'score': 0.85
        }}
    ]
    
    for alert in priority_alerts:
        severity_config = {{
            'CRITICAL': {{'color': COMPANY_COLORS['danger'], 'icon': '🔴'}},
            'HIGH': {{'color': COMPANY_COLORS['warning'], 'icon': '🟡'}},
            'MEDIUM': {{'color': COMPANY_COLORS['secondary'], 'icon': '🔵'}}
        }}
        
        config = severity_config[alert['severity']]
        
        col1, col2 = st.columns([4, 1])
        
        with col1:
            st.markdown(f"""
            <div style="background: white; padding: 1rem; border-radius: 8px; margin-bottom: 1rem; border-left: 4px solid {{config['color']}}; box-shadow: 0 2px 4px rgba(0,0,0,0.1);">
                <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 0.5rem;">
                    <h4 style="color: {{COMPANY_COLORS['primary']}}; margin: 0;">
                        {{config['icon']}} {{alert['type']}} - {{alert['id']}}
                    </h4>
                    <span style="background: {{config['color']}}; color: white; padding: 0.2rem 0.8rem; border-radius: 4px; font-size: 0.8rem;">
                        {{alert['severity']}}
                    </span>
                </div>
                <p style="margin: 0.5rem 0; color: {{COMPANY_COLORS['neutral']}};">{{alert['description']}}</p>
                <div style="display: flex; justify-content: space-between; align-items: center;">
                    <span style="color: {{COMPANY_COLORS['primary']}}; font-weight: 500;">
                        🎯 {{alert['entity']}} | ⏰ {{alert['time']}} ago | 📊 Score: {{alert['score']}}
                    </span>
                </div>
            </div>
            """, unsafe_allow_html=True)
        
        with col2:
            col_a, col_b = st.columns(2)
            with col_a:
                if st.button("🔍 View", key=f"view_{{alert['id']}}"):
                    st.info(f"Opening details for {{alert['id']}}")
            with col_b:
                if st.button("✅ Resolve", key=f"resolve_{{alert['id']}}"):
                    st.success(f"Alert {{alert['id']}} marked as resolved")
    
    # Real-time metrics
    st.markdown("### 📊 Real-Time Monitoring")
    
    # Simulate real-time data
    real_time_data = pd.DataFrame({{
        'hour': pd.date_range('2024-04-30 08:00', periods=9, freq='H'),
        'performance': [95, 97, 94, 98, 92, 85, 88, 94, 96],
        'errors': [2, 1, 3, 0, 1, 8, 5, 2, 1],
        'quality_score': [4.5, 4.6, 4.4, 4.7, 4.3, 3.8, 4.0, 4.4, 4.5]
    }})
    
    col1, col2 = st.columns(2)
    
    with col1:
        fig_ops = make_subplots(
            rows=2, cols=1,
            subplot_titles=('Performance Index', 'Error Count'),
            vertical_spacing=0.15
        )
        
        fig_ops.add_trace(
            go.Scatter(x=real_time_data['hour'], y=real_time_data['performance'],
                      mode='lines+markers', name='Performance',
                      line=dict(color=COMPANY_COLORS['primary'])),
            row=1, col=1
        )
        
        fig_ops.add_trace(
            go.Scatter(x=real_time_data['hour'], y=real_time_data['errors'],
                      mode='lines+markers', name='Errors',
                      line=dict(color=COMPANY_COLORS['danger'])),
            row=2, col=1
        )
        
        fig_ops.update_layout(height=400, title_text="Operational Monitoring")
        st.plotly_chart(fig_ops, use_container_width=True)
    
    with col2:
        fig_quality = px.line(
            real_time_data,
            x='hour',
            y='quality_score',
            title='Quality Score - Real Time',
            markers=True
        )
        
        fig_quality.add_hline(y=4.0, line_dash="dash", line_color="green", 
                             annotation_text="Target: 4.0")
        fig_quality.add_hline(y=3.5, line_dash="dash", line_color="red", 
                             annotation_text="Critical Threshold: 3.5")
        
        fig_quality.update_layout(height=400)
        st.plotly_chart(fig_quality, use_container_width=True)
    
    # Alert configuration
    st.markdown("### ⚙️ Alert Configuration")
    
    with st.expander("🔧 Configure Thresholds and Notifications"):
        col1, col2 = st.columns(2)
        
        with col1:
            st.markdown("**Alert Thresholds**")
            performance_threshold = st.slider("Performance Index", 80, 100, 90, 1)
            quality_threshold = st.slider("Quality Score", 1.0, 5.0, 3.5, 0.1)
            error_threshold = st.slider("Error Count", 0, 20, 5, 1)
        
        with col2:
            st.markdown("**Notification Channels**")
            email_alerts = st.checkbox("Email", value=True)
            slack_alerts = st.checkbox("Slack", value=True)
            sms_alerts = st.checkbox("SMS (Critical Only)", value=False)
            dashboard_alerts = st.checkbox("Dashboard", value=True)
        
        if st.button("💾 Save Configuration"):
            st.success("✅ Alert configuration updated successfully")
    
    # Alert trends
    st.markdown("### 📈 Alert Trends")
    
    num_days_trends = 30
    alert_trends = pd.DataFrame({{
        'date': pd.date_range('2024-04-01', periods=num_days_trends, freq='D'),
        'critical': ([0, 0, 1, 0, 0, 0, 0, 1, 0, 0] * (num_days_trends // 10 + 1))[:num_days_trends],
        'high': ([1, 2, 1, 3, 2, 1, 2, 2, 3, 1] * (num_days_trends // 10 + 1))[:num_days_trends],
        'medium': ([3, 5, 4, 7, 6, 4, 5, 6, 7, 3] * (num_days_trends // 10 + 1))[:num_days_trends]
    }})
    
    fig_trends = px.area(
        alert_trends,
        x='date',
        y=['critical', 'high', 'medium'],
        title='Alert Trends - Last 30 Days',
        color_discrete_map={{
            'critical': COMPANY_COLORS['danger'],
            'high': COMPANY_COLORS['warning'],
            'medium': COMPANY_COLORS['secondary']
        }}
    )
    
    st.plotly_chart(fig_trends, use_container_width=True)'''
    
    def _generate_footer(self, company_name: str, template: Dict[str, Any]) -> str:
        """Generate the footer section"""
        safe_company_name = company_name.replace("'", "\\'")
        
        return f'''# =====================================================
# FOOTER
# =====================================================

st.markdown("---")
st.markdown(f"""
<div style="text-align: center; color: {{COMPANY_COLORS['neutral']}}; padding: 2rem;">
    <p><strong>{safe_company_name} - Snowflake Cortex {template['name']} Demo</strong></p>
    <p>Demonstrating AI-powered analytics and intelligence capabilities for {template['name'].lower()}</p>
    <p>{template['icon']} {template['name']} Excellence | 🤖 Artificial Intelligence | 📊 Advanced Analytics | 🔍 Intelligent Insights</p>
</div>
""", unsafe_allow_html=True)'''
    
    def _load_base_template(self) -> str:
        """Load the base Streamlit template"""
        # This would contain the base template structure
        return ""




